name: PR to Main - Production Readiness

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  production-readiness:
    name: Production Readiness Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for required files
        run: |
          echo "Checking for required production files..."
          
          # Check for required documentation
          test -f README.md || (echo "‚ùå README.md is missing" && exit 1)
          echo "‚úÖ README.md found"
          
          test -f docker-compose.yml || (echo "‚ùå docker-compose.yml is missing" && exit 1)
          echo "‚úÖ docker-compose.yml found"
          
          test -f Makefile || (echo "‚ùå Makefile is missing" && exit 1)
          echo "‚úÖ Makefile found"
          
          # Check each service has required files
          for service in gateway api ai; do
            echo "Checking $service service..."
            test -f services/$service/Dockerfile || (echo "‚ùå Dockerfile missing for $service" && exit 1)
            test -f services/$service/requirements.txt || (echo "‚ùå requirements.txt missing for $service" && exit 1)
            test -f services/$service/main.py || (echo "‚ùå main.py missing for $service" && exit 1)
            test -d services/$service/tests || (echo "‚ùå tests directory missing for $service" && exit 1)
            echo "‚úÖ All required files present for $service"
          done
      
      - name: Check for sensitive data
        run: |
          echo "Scanning for hardcoded secrets..."
          
          # Check for hardcoded API keys
          if grep -r "sk-[a-zA-Z0-9]" services/ --include="*.py" --include="*.yml" --include="*.yaml" --include="*.env" 2>/dev/null; then
            echo "‚ùå Found potential OpenAI API keys!"
            exit 1
          fi
          
          if grep -r "OPENAI_API_KEY=" services/ --include="*.py" | grep -v "os.getenv" | grep -v "os.environ"; then
            echo "‚ùå Found hardcoded OPENAI_API_KEY!"
            exit 1
          fi
          
          # Check for hardcoded GCP credentials
          if grep -r '"private_key"' services/ --include="*.py" --include="*.json" | grep -v "test" | grep -v "example"; then
            echo "‚ùå Found potential GCP service account key!"
            exit 1
          fi
          
          # Check for hardcoded tokens
          if grep -r "Bearer [a-zA-Z0-9]" services/ --include="*.py" | grep -v "test" | grep -v "TEST_BYPASS_TOKEN" | grep -v "example"; then
            echo "‚ùå Found potential hardcoded tokens!"
            exit 1
          fi
          
          echo "‚úÖ No hardcoded secrets detected"
      
      - name: Verify environment variables
        run: |
          echo "Checking environment variable usage..."
          
          # Check that sensitive configs use environment variables
          for service in gateway api ai; do
            echo "Checking $service service..."
            
            # Check for proper environment variable usage
            if ! grep -q "os.getenv\|os.environ" services/$service/main.py; then
              echo "‚ö†Ô∏è Warning: $service may not be using environment variables"
            fi
          done
          
          echo "‚úÖ Environment variables check complete"
      
      - name: Check Docker security
        run: |
          echo "Checking Dockerfile security..."
          
          for service in gateway api ai; do
            dockerfile="services/$service/Dockerfile"
            
            # Check for non-root user
            if ! grep -q "USER" $dockerfile; then
              echo "‚ö†Ô∏è Warning: $service Dockerfile doesn't specify a non-root USER"
            fi
            
            # Check for specific version pins
            if grep -q "FROM.*:latest" $dockerfile; then
              echo "‚ö†Ô∏è Warning: $service uses :latest tag, consider pinning version"
            fi
          done
          
          echo "‚úÖ Docker security check complete"
      
      - name: Validate production configuration
        run: |
          echo "Validating production configuration..."
          
          # Check for production-specific settings
          if ! grep -q "ENVIRONMENT" docker-compose.yml; then
            echo "‚ö†Ô∏è Warning: docker-compose.yml doesn't set ENVIRONMENT variable"
          fi
          
          # Check for health checks
          for service in gateway api ai; do
            if ! grep -q "health" services/$service/main.py; then
              echo "‚ùå $service doesn't have a health check endpoint"
              exit 1
            fi
          done
          
          echo "‚úÖ Production configuration validated"
  
  staging-verification:
    name: Verify Staging Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Verify staging is up to date
        run: |
          echo "Checking if staging branch is merged..."
          
          # Get the latest staging commit
          git fetch origin staging
          
          # Check if staging is merged into this PR branch
          if ! git merge-base --is-ancestor origin/staging HEAD; then
            echo "‚ùå This branch is not up to date with staging"
            echo "Please merge or rebase with staging branch first"
            exit 1
          fi
          
          echo "‚úÖ Branch includes latest staging changes"
      
      - name: Check staging deployment status
        run: |
          echo "Verifying staging deployment..."
          
          # This would normally check the actual staging environment
          # For now, we'll just verify the workflow exists
          if [ ! -f ".github/workflows/deploy-staging.yml" ]; then
            echo "‚ùå Staging deployment workflow not found"
            exit 1
          fi
          
          echo "‚úÖ Staging deployment configuration found"
  
  approve-for-production:
    name: Production Approval
    runs-on: ubuntu-latest
    needs: [production-readiness, staging-verification]
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# üöÄ Production Deployment Readiness Report"
          echo ""
          echo "## ‚úÖ All checks passed!"
          echo ""
          echo "### Completed Verifications:"
          echo "- ‚úÖ All required files present"
          echo "- ‚úÖ No hardcoded secrets detected"
          echo "- ‚úÖ Docker security validated"
          echo "- ‚úÖ Production configuration verified"
          echo "- ‚úÖ Staging branch is merged"
          echo "- ‚úÖ Health check endpoints present"
          echo ""
          echo "### Services Ready for Deployment:"
          echo "- Gateway Service"
          echo "- API Service"
          echo "- AI Service"
          echo ""
          echo "### Next Steps:"
          echo "1. Review and approve this PR"
          echo "2. Merge to main branch"
          echo "3. Production deployment will trigger automatically"
          echo ""
          echo "**Deployment ID:** ${{ github.sha }}"
          echo "**Initiated by:** ${{ github.actor }}"
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"