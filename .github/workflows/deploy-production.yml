name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-production.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  REGISTRY: gcr.io

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    outputs:
      deployment_success: ${{ steps.deployment.outcome == 'success' }}
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker
      
      - name: Build and push Gateway image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:latest \
            services/gateway
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:latest
      
      - name: Build and push API image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:latest \
            services/api
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:latest
      
      - name: Build and push AI image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:latest \
            services/ai
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:latest
      
      - name: Deploy to Cloud Run
        run: |
          # Create service account for API if it doesn't exist
          gcloud iam service-accounts create api-service-production \
            --display-name="API Service Production" || true
          
          # Grant necessary permissions to the API service account
          API_SA_EMAIL="api-service-production@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          
          # Grant GitHub Actions SA permission to act as the API service account
          GITHUB_SA="${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"
          gcloud iam service-accounts add-iam-policy-binding ${API_SA_EMAIL} \
            --member="serviceAccount:${GITHUB_SA}" \
            --role="roles/iam.serviceAccountUser" || true
          
          # Grant editor role for full access
          gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
            --member="serviceAccount:${API_SA_EMAIL}" \
            --role="roles/editor" \
            --condition=None || true
          
          # Grant service account token creator for signing
          gcloud iam service-accounts add-iam-policy-binding ${API_SA_EMAIL} \
            --member="serviceAccount:${API_SA_EMAIL}" \
            --role="roles/iam.serviceAccountTokenCreator" || true
          
          # Deploy API with the service account
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-production-api \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8081 \
            --no-allow-unauthenticated \
            --service-account=${API_SA_EMAIL} \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --memory 512Mi \
            --set-env-vars="ENVIRONMENT=production,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},STORAGE_BUCKET=${{ env.GCP_PROJECT_ID }}-uploads"
          
          # Deploy AI
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-production-ai \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8082 \
            --no-allow-unauthenticated \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --memory 512Mi \
            --set-env-vars="ENVIRONMENT=production,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},MODEL_PROVIDER=${{ secrets.MODEL_PROVIDER }},MODEL_NAME=${{ secrets.MODEL_NAME }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }},LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }},LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }},LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}"
          
          # Get the actual service URLs after deployment
          API_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-production-api --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          AI_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-production-ai --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          
          # Deploy Gateway with the actual service URLs
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-production-gateway \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8080 \
            --allow-unauthenticated \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --memory 512Mi \
            --set-env-vars="ENVIRONMENT=production,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},API_BASE_URL=${API_URL},AI_BASE_URL=${AI_URL}" \
            --set-secrets="TEST_BYPASS_TOKEN=TEST_BYPASS_TOKEN:latest"
          
          # Get the gateway service account
          GATEWAY_SA=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-production-gateway \
            --region=${{ env.GCP_REGION }} \
            --format="value(spec.template.spec.serviceAccountName)")
          
          # Grant gateway permission to invoke API and AI services
          gcloud run services add-iam-policy-binding ${{ env.GCP_PROJECT_ID }}-production-api \
            --member="serviceAccount:${GATEWAY_SA}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
          
          gcloud run services add-iam-policy-binding ${{ env.GCP_PROJECT_ID }}-production-ai \
            --member="serviceAccount:${GATEWAY_SA}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
      
      - name: Map custom domain
        run: |
          # Map custom domain to gateway service
          DOMAIN="${{ env.GCP_PROJECT_ID }}.production.radicalsymmetry.com"
          
          # Disable prompts for gcloud component updates
          gcloud config set core/disable_prompts true
          
          # Check if domain mapping already exists
          if gcloud beta run domain-mappings describe \
            --domain $DOMAIN \
            --region ${{ env.GCP_REGION }} \
            --format="value(metadata.name)" 2>/dev/null; then
            echo "Domain mapping already exists for: https://$DOMAIN"
          else
            # Create domain mapping using beta command with region
            gcloud beta run domain-mappings create \
              --service ${{ env.GCP_PROJECT_ID }}-production-gateway \
              --domain $DOMAIN \
              --region ${{ env.GCP_REGION }} \
              --quiet
            
            echo "Domain mapping created for: https://$DOMAIN"
          fi
      
      - name: Verify deployment
        id: deployment
        run: |
          # Get the gateway service URL for immediate testing
          GATEWAY_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-production-gateway \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          
          echo "Cloud Run URL: $GATEWAY_URL"
          echo "Custom domain: https://${{ env.GCP_PROJECT_ID }}.production.radicalsymmetry.com (SSL may take 15+ minutes)"
          
          # Wait for services to stabilize
          echo "Waiting for services to stabilize..."
          sleep 30
          
          # Check Gateway health using Cloud Run URL (always works immediately)
          if curl -f $GATEWAY_URL/health; then
            echo "✅ Gateway is healthy at $GATEWAY_URL"
          else
            echo "❌ Gateway health check failed"
            exit 1
          fi
      
      - name: Create deployment record
        continue-on-error: true
        run: |
          echo "Deployment completed successfully!"
          echo "Deployment ID: ${{ github.sha }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Deployed by: ${{ github.actor }}"
          
          # Configure git user for tagging
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Tag the deployment
          git tag -a "production-$(date +%Y%m%d-%H%M%S)" -m "Production deployment ${{ github.sha }}"
          git push origin --tags || true
  
  smoke-test:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install test dependencies
        run: |
          pip install httpx pytest
      
      - name: Get production URL
        id: get-url
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | gcloud auth activate-service-account --key-file=-
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          
          PROD_URL=$(gcloud run services describe ${{ secrets.GCP_PROJECT_ID }}-production-gateway --region us-central1 --format 'value(status.url)')
          echo "prod_url=$PROD_URL" >> $GITHUB_OUTPUT
      
      - name: Run smoke tests
        env:
          PROD_URL: ${{ steps.get-url.outputs.prod_url }}
        run: |
          # Basic health checks
          echo "Testing gateway health..."
          curl -f $PROD_URL/health || exit 1
          
          # Test that gateway can reach backend services through the /health endpoint
          echo "Gateway health check passed - this validates all services are accessible"
          
          echo "✅ Production smoke tests passed"
  
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, smoke-test]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ] || [ "${{ needs.deploy.outputs.deployment_success }}" == "true" ]; then
            echo "🚀 Production deployment successful!"
            echo "All services deployed successfully."
            if [ "${{ needs.smoke-test.result }}" == "success" ]; then
              echo "Smoke tests also passed."
            elif [ "${{ needs.smoke-test.result }}" == "skipped" ]; then
              echo "Smoke tests were skipped."
            else
              echo "Note: Smoke tests failed, but core deployment succeeded."
            fi
          else
            echo "❌ Production deployment failed!"
            echo "Check the workflow logs for details."
            exit 1
          fi