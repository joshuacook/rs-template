name: Deploy to Staging

on:
  push:
    branches:
      - staging
    paths:
      - 'services/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-staging.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  REGISTRY: gcr.io

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker
      
      - name: Build and push Gateway image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-latest \
            services/gateway
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-latest
      
      - name: Build and push API image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-latest \
            services/api
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-latest
      
      - name: Build and push AI image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-latest \
            services/ai
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-latest
      
      - name: Deploy to Cloud Run
        run: |
          # Deploy API first
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-staging-api \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8081 \
            --no-allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=staging,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},STORAGE_BUCKET=${{ env.GCP_PROJECT_ID }}-uploads-staging"
          
          # Deploy AI
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-staging-ai \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8082 \
            --no-allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=staging,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},OPENAI_MODEL=gpt-5-mini,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }},LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }},LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}"
          
          # Get the actual service URLs after deployment
          API_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-api --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          AI_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-ai --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          
          # Deploy Gateway with the actual service URLs
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-staging-gateway \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8080 \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=staging,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},API_BASE_URL=${API_URL},AI_BASE_URL=${AI_URL}" \
            --set-secrets="TEST_BYPASS_TOKEN=TEST_BYPASS_TOKEN:latest"
          
          # Get the gateway service account
          GATEWAY_SA=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-gateway \
            --region=${{ env.GCP_REGION }} \
            --format="value(spec.template.spec.serviceAccountName)")
          
          # Grant gateway permission to invoke API and AI services
          gcloud run services add-iam-policy-binding ${{ env.GCP_PROJECT_ID }}-staging-api \
            --member="serviceAccount:${GATEWAY_SA}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
          
          gcloud run services add-iam-policy-binding ${{ env.GCP_PROJECT_ID }}-staging-ai \
            --member="serviceAccount:${GATEWAY_SA}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
          
          # Get the API service account to grant it permission to sign its own tokens
          API_SA=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-api \
            --region=${{ env.GCP_REGION }} \
            --format="value(spec.template.spec.serviceAccountName)")
          
          # Grant API service account permission to sign its own tokens for pre-signed URLs
          gcloud iam service-accounts add-iam-policy-binding ${API_SA} \
            --member="serviceAccount:${API_SA}" \
            --role="roles/iam.serviceAccountTokenCreator"
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to stabilize..."
          sleep 30
          
          # Check Gateway health
          GATEWAY_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-gateway --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          curl -f $GATEWAY_URL/health || exit 1
  
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install test dependencies
        run: |
          pip install httpx pytest pytest-asyncio
      
      - name: Get staging URL
        id: get-url
        run: |
          # Authenticate to get the staging URL
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | gcloud auth activate-service-account --key-file=-
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          
          STAGING_URL=$(gcloud run services describe ${{ secrets.GCP_PROJECT_ID }}-staging-gateway --region us-central1 --format 'value(status.url)')
          echo "staging_url=$STAGING_URL" >> $GITHUB_OUTPUT
      
      - name: Run E2E Integration Tests
        env:
          TEST_BASE_URL: ${{ steps.get-url.outputs.staging_url }}
          TEST_BYPASS_TOKEN: ${{ secrets.TEST_BYPASS_TOKEN }}
        run: |
          # Run gateway E2E tests against staging
          cd services/gateway
          python -m pytest tests/integration/test_e2e_integration.py -v
      
      - name: Run Firestore Integration Tests
        env:
          TEST_BASE_URL: ${{ steps.get-url.outputs.staging_url }}
          TEST_BYPASS_TOKEN: ${{ secrets.TEST_BYPASS_TOKEN }}
        run: |
          # Run API Firestore tests against staging
          cd services/api
          python -m pytest tests/integration/test_firestore_integration.py -v
      
      - name: Run Storage Integration Tests
        env:
          TEST_BASE_URL: ${{ steps.get-url.outputs.staging_url }}
          TEST_BYPASS_TOKEN: ${{ secrets.TEST_BYPASS_TOKEN }}
        run: |
          # Run API storage tests against staging
          cd services/api
          python -m pytest tests/integration/test_storage_integration.py -v
      
      - name: Report test results
        if: always()
        run: |
          echo "Integration tests completed with status: ${{ job.status }}"
          if [ "${{ job.status }}" != "success" ]; then
            echo "⚠️ Integration tests failed on staging deployment"
            exit 1
          fi
          echo "✅ All integration tests passed on staging"