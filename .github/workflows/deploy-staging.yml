name: Deploy to Staging

on:
  push:
    branches:
      - staging
    paths:
      - 'services/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-staging.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  REGISTRY: gcr.io

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker
      
      - name: Build and push Gateway image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-latest \
            services/gateway
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-latest
      
      - name: Build and push API image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-latest \
            services/api
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-latest
      
      - name: Build and push AI image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-latest \
            services/ai
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-latest
      
      - name: Deploy to Cloud Run
        run: |
          # Create service account for API if it doesn't exist
          gcloud iam service-accounts create api-service-staging \
            --display-name="API Service Staging" || true
          
          # Grant necessary permissions to the API service account
          API_SA_EMAIL="api-service-staging@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          
          # Grant GitHub Actions SA permission to act as the API service account
          GITHUB_SA="${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"
          gcloud iam service-accounts add-iam-policy-binding ${API_SA_EMAIL} \
            --member="serviceAccount:${GITHUB_SA}" \
            --role="roles/iam.serviceAccountUser" || true
          
          # Grant storage admin for the bucket
          gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
            --member="serviceAccount:${API_SA_EMAIL}" \
            --role="roles/storage.objectAdmin" \
            --condition=None || true
          
          # Grant Firestore access
          gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
            --member="serviceAccount:${API_SA_EMAIL}" \
            --role="roles/datastore.user" \
            --condition=None || true
          
          # Grant service account token creator for signing
          gcloud iam service-accounts add-iam-policy-binding ${API_SA_EMAIL} \
            --member="serviceAccount:${API_SA_EMAIL}" \
            --role="roles/iam.serviceAccountTokenCreator" || true
          
          # Deploy API with the service account
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-staging-api \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/api:staging-${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8081 \
            --no-allow-unauthenticated \
            --service-account=${API_SA_EMAIL} \
            --set-env-vars="ENVIRONMENT=staging,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},STORAGE_BUCKET=${{ env.GCP_PROJECT_ID }}-uploads-staging"
          
          # Deploy AI
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-staging-ai \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai:staging-${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8082 \
            --no-allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=staging,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},MODEL_PROVIDER=${{ secrets.MODEL_PROVIDER }},MODEL_NAME=${{ secrets.MODEL_NAME }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }},LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }},LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }},LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}"
          
          # Get the actual service URLs after deployment
          API_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-api --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          AI_URL=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-ai --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          
          # Deploy Gateway with the actual service URLs
          gcloud run deploy ${{ env.GCP_PROJECT_ID }}-staging-gateway \
            --image ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/gateway:staging-${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8080 \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=staging,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},API_BASE_URL=${API_URL},AI_BASE_URL=${AI_URL}" \
            --set-secrets="TEST_BYPASS_TOKEN=TEST_BYPASS_TOKEN:latest"
          
          # Get the gateway service account
          GATEWAY_SA=$(gcloud run services describe ${{ env.GCP_PROJECT_ID }}-staging-gateway \
            --region=${{ env.GCP_REGION }} \
            --format="value(spec.template.spec.serviceAccountName)")
          
          # Grant gateway permission to invoke API and AI services
          gcloud run services add-iam-policy-binding ${{ env.GCP_PROJECT_ID }}-staging-api \
            --member="serviceAccount:${GATEWAY_SA}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
          
          gcloud run services add-iam-policy-binding ${{ env.GCP_PROJECT_ID }}-staging-ai \
            --member="serviceAccount:${GATEWAY_SA}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
      
      - name: Map custom domain
        run: |
          # Map custom domain to gateway service
          DOMAIN="${{ env.GCP_PROJECT_ID }}.staging.radicalsymmetry.com"
          
          # Create domain mapping
          gcloud run domain-mappings create \
            --service ${{ env.GCP_PROJECT_ID }}-staging-gateway \
            --domain $DOMAIN \
            --region ${{ env.GCP_REGION }} || echo "Domain mapping already exists"
          
          echo "Staging available at: https://$DOMAIN"
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to stabilize and SSL certificate to provision..."
          sleep 30
          
          # Check Gateway health using custom domain
          DOMAIN="${{ env.GCP_PROJECT_ID }}.staging.radicalsymmetry.com"
          
          # Try for up to 10 minutes for SSL to be ready
          for i in {1..20}; do
            echo "Attempt $i/20: Testing https://$DOMAIN/health"
            if curl -f --max-time 30 https://$DOMAIN/health; then
              echo "✅ Staging is ready!"
              exit 0
            fi
            echo "SSL not ready yet, waiting 30 seconds..."
            sleep 30
          done
          
          echo "❌ SSL certificate not ready after 10 minutes"
          echo "This is normal for new domains - SSL can take 15+ minutes to provision"
          echo "The deployment succeeded, but automated tests will be skipped"
          echo "Manual testing: Check https://$DOMAIN/health in a few minutes"
  
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install test dependencies
        run: |
          pip install httpx pytest pytest-asyncio
      
      - name: Get staging URL
        id: get-url
        run: |
          # Use custom domain for staging
          STAGING_URL="https://${{ secrets.GCP_PROJECT_ID }}.staging.radicalsymmetry.com"
          echo "staging_url=$STAGING_URL" >> $GITHUB_OUTPUT
      
      - name: Run E2E Integration Tests
        env:
          TEST_BASE_URL: ${{ steps.get-url.outputs.staging_url }}
          TEST_BYPASS_TOKEN: ${{ secrets.TEST_BYPASS_TOKEN }}
        run: |
          # Run gateway E2E tests against staging
          cd services/gateway
          python -m pytest tests/integration/test_e2e_integration.py -v
      
      
      - name: Report test results
        if: always()
        run: |
          echo "Integration tests completed with status: ${{ job.status }}"
          if [ "${{ job.status }}" != "success" ]; then
            echo "⚠️ Integration tests failed on staging deployment"
            exit 1
          fi
          echo "✅ All integration tests passed on staging"