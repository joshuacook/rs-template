name: GCP Access Test

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [staging]
  workflow_dispatch:  # Allow manual triggering

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1

jobs:
  verify-and-initialize:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Verify GCP Authentication
        run: |
          echo "=== Verifying GCP Authentication ==="
          echo "Project ID: $(gcloud config get-value project)"
          echo "Authenticated accounts:"
          gcloud auth list
          echo "‚úÖ GCP authentication successful"
      
      - name: Verify Required APIs
        run: |
          echo "=== Verifying Required APIs ==="
          REQUIRED_APIS=(
            "cloudbuild.googleapis.com"
            "run.googleapis.com"
            "firestore.googleapis.com"
            "storage.googleapis.com"
            "secretmanager.googleapis.com"
            "containerregistry.googleapis.com"
            "artifactregistry.googleapis.com"
          )
          
          for API in "${REQUIRED_APIS[@]}"; do
            if gcloud services list --enabled --filter="name:$API" --format="value(name)" | grep -q "$API"; then
              echo "‚úÖ $API is enabled"
            else
              echo "‚ùå $API is not enabled"
              exit 1
            fi
          done
          
          echo "‚úÖ All required APIs are enabled"
      
      - name: Verify Firestore Database
        run: |
          echo "=== Verifying Firestore Database ==="
          if gcloud firestore databases describe --format="value(name)" 2>/dev/null; then
            echo "‚úÖ Firestore database exists"
          else
            echo "‚ùå Firestore database not found"
            exit 1
          fi
      
      - name: Verify Storage Bucket
        run: |
          echo "=== Verifying Storage Bucket ==="
          BUCKET_NAME="${{ secrets.GCP_PROJECT_ID }}-uploads"
          if gsutil ls -b "gs://$BUCKET_NAME" 2>/dev/null; then
            echo "‚úÖ Storage bucket $BUCKET_NAME exists"
          else
            echo "‚ùå Storage bucket $BUCKET_NAME not found"
            exit 1
          fi
      
      - name: Verify Secrets in Secret Manager
        run: |
          echo "=== Verifying Secrets ==="
          REQUIRED_SECRETS=(
            "TEST_BYPASS_TOKEN"
          )
          
          for SECRET in "${REQUIRED_SECRETS[@]}"; do
            if gcloud secrets describe $SECRET --format="value(name)" 2>/dev/null; then
              echo "‚úÖ Secret $SECRET exists"
            else
              echo "‚ö†Ô∏è Secret $SECRET not found - creating..."
              echo "placeholder-value" | gcloud secrets create $SECRET --data-file=-
              echo "‚úÖ Secret $SECRET created"
            fi
          done
      
      - name: Check or Create Cloud Run Services
        run: |
          echo "=== Checking Cloud Run Services ==="
          SERVICES=(
            "${{ secrets.GCP_PROJECT_ID }}-gateway"
            "${{ secrets.GCP_PROJECT_ID }}-gateway-staging"
            "${{ secrets.GCP_PROJECT_ID }}-api"
            "${{ secrets.GCP_PROJECT_ID }}-api-staging"
            "${{ secrets.GCP_PROJECT_ID }}-ai"
            "${{ secrets.GCP_PROJECT_ID }}-ai-staging"
          )
          
          for SERVICE in "${SERVICES[@]}"; do
            echo "Checking service: $SERVICE"
            if gcloud run services describe $SERVICE --region=${{ env.GCP_REGION }} --format="value(metadata.name)" 2>/dev/null; then
              echo "‚úÖ Service $SERVICE exists - regression test passed"
            else
              echo "‚ö†Ô∏è Service $SERVICE does not exist - creating placeholder..."
              # Create a minimal hello-world service as placeholder
              gcloud run deploy $SERVICE \
                --image=gcr.io/cloudrun/hello \
                --region=${{ env.GCP_REGION }} \
                --platform=managed \
                --allow-unauthenticated \
                --memory=256Mi \
                --cpu=1 \
                --max-instances=1 \
                --quiet
              echo "‚úÖ Service $SERVICE created"
            fi
          done
          
          echo "‚úÖ All services verified/initialized"
      
      - name: Summary
        run: |
          echo "======================================"
          echo "üéâ GCP Access Test Complete!"
          echo "======================================"
          echo "Project: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Region: ${{ env.GCP_REGION }}"
          echo ""
          echo "‚úÖ Authentication verified"
          echo "‚úÖ APIs enabled"
          echo "‚úÖ Firestore database ready"
          echo "‚úÖ Storage bucket ready"
          echo "‚úÖ Secrets configured"
          echo "‚úÖ Cloud Run services initialized"
          echo "======================================"